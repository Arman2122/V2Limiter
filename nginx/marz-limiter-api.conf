# Marz Limiter API server configuration
# This file should be placed in /etc/nginx/sites-available/
# Then create a symlink in /etc/nginx/sites-enabled/
# Example: sudo ln -s /etc/nginx/sites-available/marz-limiter-api.conf /etc/nginx/sites-enabled/

server {
    listen 80;
    # Replace with your domain or IP if you have one
    server_name example.com;  # Change this to your domain or IP

    # Allow certbot challenges for SSL setup later
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    # API endpoints
    location /api/ {
        proxy_pass http://localhost:8080;  # Match the API_PORT in config.json
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Swagger documentation
    location /docs {
        proxy_pass http://localhost:8080/docs;  # Match the SWAGGER_PORT in config.json
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # OpenAPI JSON
    location /openapi.json {
        proxy_pass http://localhost:8080/openapi.json;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Static files for Swagger UI
    location /static/ {
        proxy_pass http://localhost:8080/static/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Redirect root to Swagger UI
    location / {
        return 301 /docs;
    }
}

# SSL Configuration (commented out for future use)
# Once you've obtained SSL certificates with certbot, you can uncomment this section
# and modify it according to your needs

# server {
#     listen 443 ssl http2;
#     server_name example.com;  # Change this to your domain
#
#     ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_prefer_server_ciphers on;
#     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
#
#     # SSL security headers
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     add_header X-Content-Type-Options nosniff;
#     add_header X-Frame-Options SAMEORIGIN;
#     add_header X-XSS-Protection "1; mode=block";
#
#     # Rest of the configuration is the same as the HTTP server
#     location /.well-known/acme-challenge/ {
#         root /var/www/html;
#     }
#
#     location /api/ {
#         proxy_pass http://localhost:8080;
#         # ... same proxy settings as above ...
#     }
#
#     location /docs {
#         proxy_pass http://localhost:8080/docs;
#         # ... same proxy settings as above ...
#     }
#
#     location /openapi.json {
#         proxy_pass http://localhost:8080/openapi.json;
#         # ... same proxy settings as above ...
#     }
#
#     location /static/ {
#         proxy_pass http://localhost:8080/static/;
#         # ... same proxy settings as above ...
#     }
#
#     location / {
#         return 301 /docs;
#     }
# } 